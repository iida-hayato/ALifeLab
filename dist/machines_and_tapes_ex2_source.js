/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/alife-game-jam/force.ts":
/*!*************************************!*\
  !*** ./src/alife-game-jam/force.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Force\": () => /* binding */ Force\n/* harmony export */ });\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/physics */ \"./src/classes/physics.ts\");\n\nclass Force {\n    constructor(magnitude) {\n        this.magnitude = magnitude;\n    }\n    static zero() {\n        return new Force(new _classes_physics__WEBPACK_IMPORTED_MODULE_0__.Vector(0, 0));\n    }\n    accelerationTo(mass) {\n        return this.magnitude.div(mass);\n    }\n    consumedEnergyWith(mass) {\n        return this.magnitude.size * mass;\n    }\n    add(other) {\n        const vector = this.magnitude.add(other.magnitude);\n        return new Force(vector);\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/force.ts?");

/***/ }),

/***/ "./src/alife-game-jam/gene.ts":
/*!************************************!*\
  !*** ./src/alife-game-jam/gene.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gene\": () => /* binding */ Gene\n/* harmony export */ });\n/* harmony import */ var _classes_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/color */ \"./src/classes/color.ts\");\n/* harmony import */ var _classes_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/utilities */ \"./src/classes/utilities.ts\");\n\n\nclass Gene {\n    constructor(_predatorGene, _preyGene) {\n        const geneLength = Gene.geneLength;\n        const geneMaxValue = Gene.geneMaxValue;\n        this._predatorGene = _predatorGene % geneMaxValue;\n        this._preyGene = _preyGene % geneMaxValue;\n        const shiftInt = (shiftee, shiftLength) => {\n            if (shiftLength > 0) {\n                return (shiftee << shiftLength);\n            }\n            else {\n                return (shiftee >> (-shiftLength));\n            }\n        };\n        const r = shiftInt(this.predatorGene, 8 - geneLength);\n        const g = shiftInt(this.preyGene, 8 - geneLength);\n        const b = 0xFF;\n        this._color = new _classes_color__WEBPACK_IMPORTED_MODULE_0__.Color(r, g, b);\n    }\n    static createWith(binary) {\n        const geneLengthMask = Math.pow(2, Gene.geneLength) - 1;\n        const predatorGene = (binary >> Gene.geneLength) & geneLengthMask;\n        const preyGene = binary & geneLengthMask;\n        return new Gene(predatorGene, preyGene);\n    }\n    static empty() {\n        return new Gene(0, 0);\n    }\n    static random() {\n        const maxLength = Gene.maxLength;\n        return new Gene(Math.round((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_1__.random)(maxLength, 0)), Math.round((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_1__.random)(maxLength, 0)));\n    }\n    get predatorGene() {\n        return this._predatorGene;\n    }\n    get preyGene() {\n        return this._preyGene;\n    }\n    get binaryRepresentation() {\n        return (this.predatorGene << Gene.geneLength) | this.preyGene;\n    }\n    get color() {\n        return this._color;\n    }\n    toString() {\n        return `${this.predatorGene.toString(16)}|${this.preyGene.toString(16)}`;\n    }\n    copy() {\n        return new Gene(this.predatorGene, this.preyGene);\n    }\n    mutated() {\n        const mutation = 1 << Math.floor((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_1__.random)(Gene.binaryLength, 0));\n        const mutatedBinary = this.binaryRepresentation ^ mutation;\n        return Gene.createWith(mutatedBinary);\n    }\n    canEat(other, threshold) {\n        let sameBits = 0;\n        for (let i = 0; i < Gene.geneLength; i += 1) {\n            if (((this.predatorGene >> i) & 0x01) === ((other.preyGene >> i) & 0x01)) {\n                sameBits += 1;\n            }\n        }\n        return (sameBits / Gene.geneLength) > threshold;\n    }\n}\nGene.geneLength = 3; // predatorGene, preyGene それぞれの長さ\nGene.binaryLength = Gene.geneLength * 2;\nGene.geneMaxValue = Math.pow(2, Gene.geneLength);\nGene.maxLength = Math.pow(2, Gene.geneMaxValue) - 1;\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/gene.ts?");

/***/ }),

/***/ "./src/alife-game-jam/life.ts":
/*!************************************!*\
  !*** ./src/alife-game-jam/life.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Life\": () => /* binding */ Life,\n/* harmony export */   \"PassiveLife\": () => /* binding */ PassiveLife,\n/* harmony export */   \"GeneticLife\": () => /* binding */ GeneticLife,\n/* harmony export */   \"GeneticResource\": () => /* binding */ GeneticResource,\n/* harmony export */   \"ActiveLife\": () => /* binding */ ActiveLife,\n/* harmony export */   \"MetaActiveLife\": () => /* binding */ MetaActiveLife,\n/* harmony export */   \"GeneticActiveLife\": () => /* binding */ GeneticActiveLife\n/* harmony export */ });\n/* harmony import */ var _classes_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/utilities */ \"./src/classes/utilities.ts\");\n/* harmony import */ var _gene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gene */ \"./src/alife-game-jam/gene.ts\");\n/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object */ \"./src/alife-game-jam/object.ts\");\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/physics */ \"./src/classes/physics.ts\");\n/* harmony import */ var _force__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./force */ \"./src/alife-game-jam/force.ts\");\n\n\n\n\n\nclass Life extends _object__WEBPACK_IMPORTED_MODULE_2__.WorldObject {\n    constructor(position) {\n        super(position);\n        this.position = position;\n        this._size = 3;\n        const radius = this._size / 2;\n        this._mass = radius * radius;\n    }\n    get isAlive() {\n        return true;\n    }\n    next() {\n        return [_force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), []];\n    }\n    draw(p, anchor) {\n        p.noFill();\n        p.stroke(86, 51, 245);\n        const diameter = this.size;\n        p.circle(this.position.x + anchor.x, this.position.y + anchor.y, diameter);\n    }\n}\nLife.collisionPriority = 100;\nclass PassiveLife extends Life {\n    constructor(position, size) {\n        super(position);\n        this.position = position;\n        this._size = size;\n        const radius = this._size / 2;\n        this._mass = (radius * radius) / 100;\n    }\n    next() {\n        return [_force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), []];\n    }\n    draw(p, anchor) {\n        p.noFill();\n        p.stroke(86, 51, 245);\n        this.drawCircles(p, 6, this.position.x + anchor.x, this.position.y + anchor.y, this.size);\n    }\n    drawCircles(p, numberOfCircles, x, y, diameter) {\n        if (numberOfCircles <= 0) {\n            return;\n        }\n        p.circle(x, y, diameter);\n        this.drawCircles(p, numberOfCircles - 1, x - this.velocity.x * 2.5, y - this.velocity.y * 2.5, diameter * 0.6);\n    }\n}\nclass GeneticLife extends Life {\n    constructor(position) {\n        super(position);\n        this.position = position;\n        this.forces = [];\n    }\n    get energy() {\n        return 0;\n    }\n    get isAlive() {\n        return false;\n    }\n    get gene() {\n        return _gene__WEBPACK_IMPORTED_MODULE_1__.Gene.empty();\n    }\n    eaten() {\n        return [];\n    }\n}\nclass GeneticResource extends GeneticLife {\n    constructor(position, gene, size, energy) {\n        super(position);\n        this.position = position;\n        this._size = size;\n        this._mass = 0.5;\n        this._energy = energy;\n        this._gene = gene;\n    }\n    get gene() {\n        return this._gene;\n    }\n    get energy() {\n        return this._energy;\n    }\n    get isAlive() {\n        return false;\n    }\n    next() {\n        return [_force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), []];\n    }\n    draw(p, anchor) {\n        p.noStroke();\n        p.fill(this.gene.color.p5(p, 0xFF));\n        const diameter = this.size;\n        p.rect(this.position.x - this.size + anchor.x, this.position.y - this.size + anchor.y, diameter, diameter);\n    }\n    eaten() {\n        this._energy = 0;\n        return [];\n    }\n}\n// 抽象クラス\nclass ActiveLife extends GeneticLife {\n    constructor(position) {\n        super(position);\n        this.position = position;\n    }\n    eat(other) {\n        return [];\n    }\n}\nclass MetaActiveLife extends ActiveLife {\n    constructor(position, lives) {\n        super(position);\n        this.position = position;\n        this.containedLives = lives;\n        this._mass = lives.reduce((previous, current) => {\n            return previous + current.mass;\n        }, 0);\n        this._size = this.calcurateSize();\n        this._gene = this.calcurateGene();\n    }\n    get gene() {\n        return this._gene;\n    }\n    get isAlive() {\n        return (this.containedLives.findIndex(life => life.isAlive) >= 0); // TODO: Gene をチェックして多様過ぎたら死亡するようにする\n    }\n    next() {\n        if (this.isAlive === false) {\n            return [_force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), this.containedLives];\n        }\n        const eatProbability = 0.9;\n        const newLives = [];\n        const killed = [];\n        for (let i = 0; i < this.containedLives.length; i += 1) {\n            const life = this.containedLives[i];\n            if (life.isAlive === false) {\n                continue;\n            }\n            const next = life.next();\n            const coordinate = this.updateCoordinateFor(life.position, life.velocity, next[0], life.mass, life.size);\n            life.position = coordinate[0];\n            life.velocity = coordinate[1];\n            const offsprings = next[1];\n            newLives.push(...offsprings);\n            if (life instanceof ActiveLife) {\n                const threshold = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(1, eatProbability);\n                for (let j = (i + 1); j < this.containedLives.length; j += 1) {\n                    const otherLife = this.containedLives[j];\n                    if (life.isCollidingWith(otherLife)) {\n                        if (life.gene.canEat(otherLife.gene, threshold)) {\n                            const predator = life;\n                            const prey = otherLife;\n                            const remainings = predator.eat(prey);\n                            newLives.push(...remainings);\n                            killed.push(prey);\n                            break;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                }\n            }\n        }\n        this.containedLives = this.containedLives.filter(l => {\n            return killed.indexOf(l) < 0;\n        });\n        this.containedLives.push(...newLives);\n        this._size = this.calcurateSize();\n        this._gene = this.calcurateGene();\n        const max = 0.1;\n        const vx = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, -max);\n        const vy = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, -max);\n        const force = new _force__WEBPACK_IMPORTED_MODULE_4__.Force(new _classes_physics__WEBPACK_IMPORTED_MODULE_3__.Vector(vx, vy));\n        return [force, []];\n    }\n    draw(p, anchor) {\n        const localAnchor = anchor.add(this.position);\n        this.containedLives.forEach(life => {\n            life.draw(p, localAnchor);\n        });\n        p.fill(this.gene.color.p5(p, 0x20));\n        p.strokeWeight(1);\n        p.stroke(0x20, 0x80);\n        const diameter = this.size;\n        p.circle(this.position.x + anchor.x, this.position.y + anchor.y, diameter);\n    }\n    eat(other) {\n        const coordinate = this.updateCoordinateFor(other.position, other.velocity, _force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), other.mass, other.size);\n        other.position = coordinate[0];\n        other.velocity = coordinate[1];\n        this.containedLives.push(other);\n        return [];\n    }\n    eaten() {\n        this.containedLives.forEach(life => {\n            life.position = life.position.add(this.position);\n        });\n        return this.containedLives;\n    }\n    calcurateSize() {\n        if (this.containedLives.length === 0) {\n            return 10;\n        }\n        else {\n            const square = this.containedLives.reduce((previous, current) => {\n                return previous + (current.size * current.size);\n            }, 0);\n            return Math.sqrt(square * 6);\n        }\n    }\n    calcurateGene() {\n        if (this.containedLives.length === 0) {\n            return _gene__WEBPACK_IMPORTED_MODULE_1__.Gene.empty();\n        }\n        return this.containedLives[0].gene.copy();\n    }\n    // 返り値は [newPosition: Vector, newVelocity: Vector]\n    updateCoordinateFor(position, velocity, force, mass, lifeSize) {\n        const friction = 0.85;\n        const acceleration = force.accelerationTo(mass);\n        let nextPosition = position.add(velocity);\n        let nextVelocity;\n        const radius = (this.size - lifeSize) / 2;\n        if (nextPosition.size > radius) {\n            nextPosition = nextPosition.sized(radius);\n            nextVelocity = _classes_physics__WEBPACK_IMPORTED_MODULE_3__.Vector.zero();\n        }\n        else {\n            nextVelocity = velocity.mult(friction)\n                .add(acceleration);\n        }\n        return [nextPosition, nextVelocity];\n    }\n}\nclass GeneticActiveLife extends ActiveLife {\n    constructor(position, gene, size, energy, mutationRate) {\n        super(position);\n        this.position = position;\n        this.mutationRate = mutationRate;\n        this._size = size;\n        this._mass = 0.5;\n        this._energy = energy;\n        this._gene = gene;\n    }\n    get gene() {\n        return this._gene;\n    }\n    get energy() {\n        return this._energy;\n    }\n    get isAlive() {\n        return this.energy > 0;\n    }\n    eaten() {\n        this._energy = 0;\n        return [];\n    }\n    next() {\n        if (this.isAlive === false) {\n            return [_force__WEBPACK_IMPORTED_MODULE_4__.Force.zero(), []];\n        }\n        const energyConsumptionRate = 1 / 10;\n        const max = 0.1;\n        const vx = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, -max);\n        const vy = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, -max);\n        const force = new _force__WEBPACK_IMPORTED_MODULE_4__.Force(new _classes_physics__WEBPACK_IMPORTED_MODULE_3__.Vector(vx, vy));\n        this._energy = Math.max(this.energy - (force.consumedEnergyWith(this.mass) * energyConsumptionRate), 0);\n        const offsprings = this.reproduce();\n        return [force, offsprings];\n    }\n    draw(p, anchor) {\n        if (this.isAlive) {\n            p.noStroke();\n            if (this.energy < 1) {\n                p.fill(255, 0, 0);\n            }\n            else {\n                p.fill(this.gene.color.p5(p, 0xFF));\n            }\n        }\n        else {\n            p.noFill();\n            p.strokeWeight(1);\n            p.stroke(this.gene.color.p5(p, 0x80));\n        }\n        const diameter = this.size;\n        p.circle(this.position.x + anchor.x, this.position.y + anchor.y, diameter);\n    }\n    eat(other) {\n        this._energy += other.energy;\n        return other.eaten();\n    }\n    reproduce() {\n        const reproductionEnergy = this.size * this.size;\n        if (this._energy <= (reproductionEnergy * 2)) {\n            return [];\n        }\n        const energyAfterReproduction = (this._energy - reproductionEnergy) / 2;\n        this._energy = energyAfterReproduction;\n        const position = this.position.add(this.velocity.sized(this.size * -2));\n        let gene;\n        if ((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(1) < this.mutationRate) {\n            gene = this.gene.mutated();\n        }\n        else {\n            gene = this.gene.copy();\n        }\n        const offspring = new GeneticActiveLife(position, gene, this.size, energyAfterReproduction, this.mutationRate);\n        offspring.velocity = this.velocity.sized(-1);\n        return [offspring];\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/life.ts?");

/***/ }),

/***/ "./src/alife-game-jam/object.ts":
/*!**************************************!*\
  !*** ./src/alife-game-jam/object.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WorldObject\": () => /* binding */ WorldObject,\n/* harmony export */   \"Wall\": () => /* binding */ Wall\n/* harmony export */ });\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/physics */ \"./src/classes/physics.ts\");\n\nclass WorldObject {\n    constructor(position) {\n        this.position = position;\n        this.velocity = new _classes_physics__WEBPACK_IMPORTED_MODULE_0__.Vector(0, 0);\n        this._size = 1;\n        this._mass = 1;\n    }\n    get size() {\n        return this._size;\n    }\n    get mass() {\n        return this._mass;\n    }\n    get toString() {\n        return `${String(typeof this)}, position: ${String(this.position)}, velocity: ${String(this.velocity)}`;\n    }\n    isCollidingWith(other) {\n        const distance = this.position.dist(other.position);\n        return distance < ((this.size + other.size) / 2);\n    }\n    collideWith(other) {\n        // TODO: implement\n        // ここで何かが起きるのは物理法則の何かを発動するということ\n        return;\n    }\n    draw(p, anchor) {\n        p.noStroke();\n        p.fill(255, 0, 0);\n        const radius = 1;\n        const diameter = radius * 2;\n        p.ellipse(this.position.x - radius + anchor.x, this.position.y - radius + anchor.y, diameter, diameter);\n    }\n}\nWorldObject.collisionPriority = 0;\nclass Wall extends WorldObject {\n    constructor(position, width, height) {\n        super(position);\n        this.position = position;\n        this.width = width;\n        this.height = height;\n    }\n    draw(p, anchor) {\n        p.noStroke();\n        p.fill(207, 196, 251);\n        p.rect(this.position.x + anchor.x, this.position.y + anchor.y, this.width, this.height);\n    }\n}\nWall.collisionPriority = 1;\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/object.ts?");

/***/ }),

/***/ "./src/alife-game-jam/terrain.ts":
/*!***************************************!*\
  !*** ./src/alife-game-jam/terrain.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Terrain\": () => /* binding */ Terrain,\n/* harmony export */   \"VanillaTerrain\": () => /* binding */ VanillaTerrain,\n/* harmony export */   \"GravitationalTerrain\": () => /* binding */ GravitationalTerrain,\n/* harmony export */   \"FrictedTerrain\": () => /* binding */ FrictedTerrain\n/* harmony export */ });\n/* harmony import */ var _force__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./force */ \"./src/alife-game-jam/force.ts\");\n\nclass Terrain {\n    constructor(size) {\n        this.size = size;\n    }\n    frictionAt(position) {\n        return 1; // 0(停止) ~ 1(摩擦なし)\n    }\n    forceAt(position) {\n        return _force__WEBPACK_IMPORTED_MODULE_0__.Force.zero();\n    }\n    draw(p) {\n        return;\n    }\n}\nclass VanillaTerrain extends Terrain {\n    constructor(size, gravityCenter, gravity, friction, immobilizedWidth) {\n        super(size);\n        this.size = size;\n        this.gravityCenter = gravityCenter;\n        this.gravity = gravity;\n        this.friction = friction;\n        this.immobilizedWidth = immobilizedWidth;\n    }\n    frictionAt(position) {\n        if (position.x < this.immobilizedWidth) {\n            return (position.x / this.immobilizedWidth);\n        }\n        if (position.x > (this.size.x - this.immobilizedWidth)) {\n            return (this.size.x - position.x) / this.immobilizedWidth;\n        }\n        if (position.y < this.immobilizedWidth) {\n            return (position.y / this.immobilizedWidth);\n        }\n        if (position.y > (this.size.y - this.immobilizedWidth)) {\n            return (this.size.y - position.y) / this.immobilizedWidth;\n        }\n        return this.friction;\n    }\n    forceAt(position) {\n        if (this.gravityCenter == undefined) {\n            return _force__WEBPACK_IMPORTED_MODULE_0__.Force.zero();\n        }\n        const distance = Math.max(this.gravityCenter.dist(position), this.gravity / 10); // ブラックホールは法律で禁止されている\n        const magnitude = (1 / (distance * distance)) * this.gravity;\n        const vector = this.gravityCenter.sub(position);\n        return new _force__WEBPACK_IMPORTED_MODULE_0__.Force(vector.sized(magnitude));\n    }\n    draw(p) {\n        this.drawImmobilizedArea(p);\n        this.drawGravityCenter(p);\n    }\n    drawImmobilizedArea(p) {\n        p.stroke(207, 196, 251);\n        p.strokeWeight(this.immobilizedWidth);\n        p.noFill();\n        p.rect(0, 0, this.size.x, this.size.y);\n    }\n    drawGravityCenter(p) {\n        if (this.gravityCenter == undefined) {\n            return;\n        }\n        p.noStroke();\n        p.fill(80);\n        const size = 20;\n        p.ellipse(this.gravityCenter.x, this.gravityCenter.y, size, size);\n    }\n}\nclass GravitationalTerrain extends Terrain {\n    constructor(size, center, gravity) {\n        super(size);\n        this.size = size;\n        this.center = center;\n        this.gravity = gravity;\n        this.isAtmosphereEnabled = true;\n        this.atmosphereHeight = this.gravity / 2;\n    }\n    frictionAt(position) {\n        // 大気圏\n        if (!this.isAtmosphereEnabled) {\n            return 1;\n        }\n        const distance = Math.max(this.center.dist(position), 0.1);\n        if (distance > this.atmosphereHeight) {\n            return 1;\n        }\n        return 1 - Math.pow((distance - this.atmosphereHeight) / this.atmosphereHeight, 12);\n    }\n    forceAt(position) {\n        const distance = Math.max(this.center.dist(position), this.gravity / 10); // ブラックホールは法律で禁止されている\n        const magnitude = (1 / (distance * distance)) * this.gravity;\n        const vector = this.center.sub(position);\n        return new _force__WEBPACK_IMPORTED_MODULE_0__.Force(vector.sized(magnitude));\n    }\n    draw(p) {\n        p.noStroke();\n        p.fill(80);\n        const size = Math.max(this.gravity / 10, 4);\n        p.ellipse(this.center.x, this.center.y, size, size);\n        if (this.isAtmosphereEnabled) {\n            p.noFill();\n            p.stroke(142, 141, 176);\n            p.circle(this.center.x, this.center.y, this.atmosphereHeight);\n        }\n    }\n}\nclass FrictedTerrain extends Terrain {\n    constructor(size, friction) {\n        super(size);\n        this.size = size;\n        this.friction = friction;\n        if ((friction < 0) || (friction > 1)) {\n            console.log(`[Terrain] friction should be between 0-1 (${friction} given)`);\n        }\n    }\n    frictionAt(position) {\n        return this.friction;\n    }\n    forceAt(position) {\n        return _force__WEBPACK_IMPORTED_MODULE_0__.Force.zero();\n    }\n    draw(p) {\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/terrain.ts?");

/***/ }),

/***/ "./src/alife-game-jam/world.ts":
/*!*************************************!*\
  !*** ./src/alife-game-jam/world.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VanillaWorld\": () => /* binding */ VanillaWorld,\n/* harmony export */   \"PredPreyWorld\": () => /* binding */ PredPreyWorld\n/* harmony export */ });\n/* harmony import */ var _classes_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/utilities */ \"./src/classes/utilities.ts\");\n/* harmony import */ var _life__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./life */ \"./src/alife-game-jam/life.ts\");\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/physics */ \"./src/classes/physics.ts\");\n/* harmony import */ var _force__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./force */ \"./src/alife-game-jam/force.ts\");\n\n\n\n\nclass VanillaWorld {\n    constructor(size, terrains) {\n        this._lives = [];\n        this._t = 0;\n        this._objects = [];\n        this._size = size;\n        this._terrains = terrains;\n    }\n    get size() {\n        return this._size;\n    }\n    get t() {\n        return this._t;\n    }\n    get terrains() {\n        return this._terrains;\n    }\n    get objects() {\n        return this._objects;\n    }\n    get lives() {\n        return this._lives;\n    }\n    addObjects(objects) {\n        this._objects = this._objects.concat(objects);\n    }\n    addLives(lives) {\n        this._lives = this._lives.concat(lives);\n    }\n    next() {\n        this._t += 1;\n        this._lives.forEach(life => {\n            const next = life.next();\n            const coordinate = this.updateCoordinateFor(life.position, life.velocity, next[0], life.mass);\n            life.position = coordinate[0];\n            life.velocity = coordinate[1];\n        });\n    }\n    draw(p) {\n        this.terrains.forEach(terrain => {\n            terrain.draw(p);\n        });\n        this.objects.forEach(obj => {\n            obj.draw(p, _classes_physics__WEBPACK_IMPORTED_MODULE_2__.Vector.zero());\n        });\n        this.lives.forEach(life => {\n            life.draw(p, _classes_physics__WEBPACK_IMPORTED_MODULE_2__.Vector.zero());\n        });\n    }\n    // 返り値は [newPosition: Vector, newVelocity: Vector]\n    updateCoordinateFor(position, velocity, force, mass) {\n        const forces = this.terrains.map(terrain => {\n            return terrain.forceAt(position);\n        });\n        const sumForces = (result, value) => {\n            return result.add(value);\n        };\n        const fieldForce = forces.reduce(sumForces, _force__WEBPACK_IMPORTED_MODULE_3__.Force.zero());\n        const sumForce = force.add(fieldForce);\n        const frictions = this.terrains.map(terrain => {\n            return terrain.frictionAt(position);\n        });\n        const sumFrictions = (sum, value) => {\n            return sum + value;\n        };\n        const friction = frictions.reduce(sumFrictions, 1) / (frictions.length + 1);\n        const acceleration = sumForce.accelerationTo(mass);\n        const nextPosition = position.add(velocity);\n        const nextVelocity = velocity.mult(friction)\n            .add(acceleration);\n        let x = nextPosition.x;\n        let y = nextPosition.y;\n        let dx = nextVelocity.x;\n        let dy = nextVelocity.y;\n        if (x < 0) {\n            x = 0;\n            dx = 0;\n        }\n        else if (x > this.size.x) {\n            x = this.size.x;\n            dx = 0;\n        }\n        if (y < 0) {\n            y = 0;\n            dy = 0;\n        }\n        else if (y > this.size.y) {\n            y = this.size.y;\n            dy = 0;\n        }\n        return [new _classes_physics__WEBPACK_IMPORTED_MODULE_2__.Vector(x, y), new _classes_physics__WEBPACK_IMPORTED_MODULE_2__.Vector(dx, dy)];\n    }\n}\nclass PredPreyWorld extends VanillaWorld {\n    constructor() {\n        super(...arguments);\n        this._lives = [];\n        this._t = 0;\n    }\n    get lives() {\n        return this._lives;\n    }\n    next() {\n        this._t += 1;\n        const eatProbability = 0.9;\n        const killed = [];\n        const newLives = [];\n        const sortedX = [...this.lives].sort((lhs, rhs) => {\n            return lhs.position.x - rhs.position.x;\n        });\n        for (let i = 0; i < this.lives.length; i += 1) {\n            const life = this.lives[i];\n            life.forces = [];\n            if (life instanceof _life__WEBPACK_IMPORTED_MODULE_1__.ActiveLife) {\n                if (life.isAlive) {\n                    const xIndex = sortedX.indexOf(life);\n                    const maxX = life.position.x + life.size;\n                    const minX = life.position.x - life.size;\n                    const compareTo = [];\n                    for (let k = i + 1; k < this.lives.length; k += 1) {\n                        compareTo.push(this.lives[k]);\n                    }\n                    // FixMe: 衝突判定が漏れる\n                    // for (let k = xIndex + 1; k < sortedX.length; k += 1) {\n                    //   if (sortedX[k].position.x > maxX) {\n                    //     break\n                    //   }\n                    //   compareTo.push(sortedX[k])\n                    // }\n                    // for (let k = xIndex - 1; k >= 0; k -= 1) {\n                    //   if (sortedX[k].position.x < minX) {\n                    //     break\n                    //   }\n                    //   compareTo.push(sortedX[k])\n                    // }\n                    const threshold = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(1, eatProbability);\n                    for (let j = 0; j < compareTo.length; j += 1) {\n                        const otherLife = compareTo[j];\n                        const distance = life.position.dist(otherLife.position);\n                        const minDistance = (life.size + otherLife.size) / 2;\n                        const isColliding = distance < minDistance;\n                        if (isColliding === false) {\n                            continue;\n                        }\n                        if (life.gene.canEat(otherLife.gene, threshold)) {\n                            const predator = life;\n                            const prey = otherLife;\n                            const remainings = predator.eat(prey);\n                            newLives.push(...remainings);\n                            killed.push(prey);\n                            // break // FixMe: 捕食が発生するとcollisionがスキップされてしまう\n                        }\n                        else {\n                            const normalizedDistance = ((minDistance - distance) / minDistance);\n                            const forceMagnitude = normalizedDistance * 1;\n                            life.forces.push(life.position.sub(otherLife.position).sized(forceMagnitude));\n                            otherLife.forces.push(otherLife.position.sub(life.position).sized(forceMagnitude));\n                        }\n                    }\n                }\n                else {\n                    // Dead\n                }\n            }\n        }\n        this._lives = this.lives.filter(l => {\n            return killed.indexOf(l) < 0;\n        });\n        for (let i = 0; i < this.lives.length; i += 1) {\n            const life = this.lives[i];\n            const next = life.next();\n            const sumForces = life.forces.reduce((result, current) => {\n                return result.add(new _force__WEBPACK_IMPORTED_MODULE_3__.Force(current));\n            }, next[0]);\n            const coordinate = this.updateCoordinateFor(life.position, life.velocity, sumForces, life.mass);\n            life.position = coordinate[0];\n            life.velocity = coordinate[1];\n            const offsprings = next[1];\n            newLives.push(...offsprings);\n        }\n        this.addLives(newLives);\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/alife-game-jam/world.ts?");

/***/ }),

/***/ "./src/classes/color.ts":
/*!******************************!*\
  !*** ./src/classes/color.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Color\": () => /* binding */ Color\n/* harmony export */ });\nclass Color {\n    constructor(r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n    p5(p, alpha) {\n        return p.color(this.r, this.g, this.b, alpha !== null && alpha !== void 0 ? alpha : 0xFF);\n    }\n    toString() {\n        const rawColorToString = (value) => {\n            return value.toString(16)\n                .padStart(2, \"0\");\n        };\n        return `#${rawColorToString(this.r)}${rawColorToString(this.g)}${rawColorToString(this.b)}`;\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/classes/color.ts?");

/***/ }),

/***/ "./src/classes/physics.ts":
/*!********************************!*\
  !*** ./src/classes/physics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector\": () => /* binding */ Vector\n/* harmony export */ });\n/* harmony import */ var _classes_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/utilities */ \"./src/classes/utilities.ts\");\n\nclass Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static zero() {\n        return new Vector(0, 0);\n    }\n    static random(max, min) {\n        return new Vector((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, min), (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(max, min));\n    }\n    get transposed() {\n        return new Vector(this.y, this.x);\n    }\n    get size() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    toString() {\n        return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;\n    }\n    add(other) {\n        return new Vector(this.x + other.x, this.y + other.y);\n    }\n    sub(other) {\n        return new Vector(this.x - other.x, this.y - other.y);\n    }\n    mult(n) {\n        return new Vector(this.x * n, this.y * n);\n    }\n    div(n) {\n        return new Vector(this.x / n, this.y / n);\n    }\n    dist(other) {\n        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));\n    }\n    sized(size) {\n        const mul = size / this.size;\n        return this.mult(mul);\n    }\n    rotated(radian) {\n        const x = this.x * Math.cos(radian) - this.y * Math.sin(radian);\n        const y = this.x * Math.sin(radian) + this.y * Math.cos(radian);\n        return new Vector(x, y);\n    }\n    randomized() {\n        return new Vector((0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(this.x), (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(this.y));\n    }\n    moved(radian, length) {\n        const x = this.x + Math.cos(radian) * length;\n        const y = this.y + Math.sin(radian) * length;\n        return new Vector(x, y);\n    }\n    truncate(another) {\n        const x = Math.max(Math.min(this.x, another.x), 0);\n        const y = Math.max(Math.min(this.y, another.y), 0);\n        return new Vector(x, y);\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/classes/physics.ts?");

/***/ }),

/***/ "./src/classes/url_parameter_parser.ts":
/*!*********************************************!*\
  !*** ./src/classes/url_parameter_parser.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"URLParameterParser\": () => /* binding */ URLParameterParser\n/* harmony export */ });\nclass URLParameterParser {\n    constructor(query) {\n        this.parameters = new Map();\n        this.usedKeys = [];\n        const rawQuery = query !== null && query !== void 0 ? query : document.location.search;\n        const pairs = rawQuery\n            .slice(rawQuery.indexOf(\"?\") + 1)\n            .split(\"&\");\n        // tslint:disable-next-line:no-any\n        const rawParameters = {};\n        for (const query of pairs) {\n            if (query === \"\") {\n                continue;\n            }\n            const pair = query.split(\"=\");\n            rawParameters[pair[0]] = pair[1];\n            this.parameters.set(pair[0], pair[1]);\n        }\n    }\n    hasKey(key, shortKey) {\n        if ((shortKey != undefined) && (this.parameters.get(shortKey) != undefined)) {\n            return true;\n        }\n        return this.parameters.get(key) != undefined;\n    }\n    int(key, defaultValue, shortKey) {\n        let rawValue;\n        if (shortKey != undefined) {\n            this.usedKeys.push(shortKey);\n            rawValue = this.parameters.get(shortKey);\n        }\n        this.usedKeys.push(key);\n        if (rawValue == undefined) {\n            rawValue = this.parameters.get(key);\n        }\n        if (rawValue == undefined) {\n            return defaultValue;\n        }\n        const parsedValue = parseInt(rawValue, 10);\n        if (isNaN(parsedValue)) {\n            return defaultValue;\n        }\n        return parsedValue;\n    }\n    float(key, defaultValue, shortKey) {\n        let rawValue;\n        if (shortKey != undefined) {\n            this.usedKeys.push(shortKey);\n            rawValue = this.parameters.get(shortKey);\n        }\n        this.usedKeys.push(key);\n        if (rawValue == undefined) {\n            rawValue = this.parameters.get(key);\n        }\n        if (rawValue == undefined) {\n            return defaultValue;\n        }\n        const parsedValue = parseFloat(rawValue);\n        if (isNaN(parsedValue)) {\n            return defaultValue;\n        }\n        return parsedValue;\n    }\n    boolean(key, defaultValue, shortKey) {\n        let rawValue;\n        if (shortKey != undefined) {\n            this.usedKeys.push(shortKey);\n            rawValue = this.parameters.get(shortKey);\n        }\n        this.usedKeys.push(key);\n        if (rawValue == undefined) {\n            rawValue = this.parameters.get(key);\n        }\n        if (rawValue == undefined) {\n            return defaultValue;\n        }\n        const parsedValue = parseInt(rawValue, 10);\n        if (isNaN(parsedValue)) {\n            return defaultValue;\n        }\n        return parsedValue > 0;\n    }\n    string(key, defaultValue, shortKey) {\n        let rawValue;\n        if (shortKey != undefined) {\n            this.usedKeys.push(shortKey);\n            rawValue = this.parameters.get(shortKey);\n        }\n        this.usedKeys.push(key);\n        if (rawValue == undefined) {\n            rawValue = this.parameters.get(key);\n        }\n        if (rawValue == undefined) {\n            return defaultValue;\n        }\n        return rawValue;\n    }\n    unusedKeys() {\n        const allKeys = Array.from(this.parameters.keys());\n        return allKeys.filter(k => this.usedKeys.indexOf(k) === -1);\n    }\n    toURLString() {\n        let str = \"?\";\n        this.parameters.forEach((value, key) => {\n            str = `${str}&${key}=${value}`;\n        });\n        return str;\n    }\n    getBoolean(key, defaultValue) {\n        const value = this.parameters.get(key);\n        if (value === undefined) {\n            return defaultValue;\n        }\n        return value === \"1\";\n    }\n    setBoolean(key, value) {\n        this.parameters.set(key, (value ? \"1\" : \"0\"));\n    }\n    getString(key, defaultValue) {\n        const value = this.parameters.get(key);\n        if (value == undefined) {\n            return defaultValue;\n        }\n        return value;\n    }\n    setString(key, value) {\n        this.parameters.set(key, value);\n    }\n    getNumber(key, defaultValue) {\n        const value = this.parameters.get(key);\n        if (value === undefined) {\n            return defaultValue;\n        }\n        return Number(this.parameters.get(key));\n    }\n    setNumber(key, value) {\n        this.parameters.set(key, value.toString());\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/classes/url_parameter_parser.ts?");

/***/ }),

/***/ "./src/classes/utilities.ts":
/*!**********************************!*\
  !*** ./src/classes/utilities.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"random\": () => /* binding */ random\n/* harmony export */ });\n// export function random(max: number): number\t// not working: raises \"Expected 1 arguments, but got 2.\"\nfunction random(max, min) {\n    if (min == undefined) {\n        return Math.random() * max;\n    }\n    const range = max - min;\n    return Math.random() * range + min;\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/classes/utilities.ts?");

/***/ }),

/***/ "./src/pages/machines_and_tapes_ex2/machine.ts":
/*!*****************************************************!*\
  !*** ./src/pages/machines_and_tapes_ex2/machine.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Machine\": () => /* binding */ Machine\n/* harmony export */ });\n/* harmony import */ var _tape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tape */ \"./src/pages/machines_and_tapes_ex2/tape.ts\");\n/* harmony import */ var _alife_game_jam_life__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../alife-game-jam/life */ \"./src/alife-game-jam/life.ts\");\n\n\nclass Machine extends _alife_game_jam_life__WEBPACK_IMPORTED_MODULE_1__.Life {\n    constructor(position, tape) {\n        super(position);\n        this.position = position;\n        this.tape = tape;\n        this._pointer = 0;\n        this._workingTape = [];\n        this._size = tape.bits.length;\n        this._life = Math.max(Math.min((tape.bits.length - 1) * 20, 100), 0);\n    }\n    get size() {\n        return this._size;\n    }\n    get pointer() {\n        return this._pointer;\n    }\n    get isAlive() {\n        return this._life > 0;\n    }\n    get workingTape() {\n        return this._workingTape;\n    }\n    get color() {\n        return this.tape.color;\n    }\n    nextBit(index) {\n        const pointer = (this._pointer + (index !== null && index !== void 0 ? index : 0)) % this.tape.bits.length;\n        return this.tape.bits[pointer];\n    }\n    canConnect(tape) {\n        const canConnectBits = (0,_tape__WEBPACK_IMPORTED_MODULE_0__.canConnect)(tape.bits[0], this.nextBit());\n        if (canConnectBits === false) {\n            this._life -= 4; // FixMe: 副作用が起きることが明示的なメソッドの中に移す\n        }\n        return canConnectBits;\n    }\n    // canConnect() == true である前提\n    connect(tape) {\n        const translated = tape.bits; // .map(x => (x ^ 1) as Bit) // TODO: 変換方法\n        this._workingTape = this._workingTape.concat(translated);\n        tape.bits.forEach((x, index) => {\n            const canConnectBit = (0,_tape__WEBPACK_IMPORTED_MODULE_0__.canConnect)(x, this.nextBit(index));\n            if (canConnectBit === false) {\n                this._life -= 10;\n            }\n        });\n        if (this._workingTape.length >= this.tape.bits.length) {\n            const newMachine = new Machine(this.position, new _tape__WEBPACK_IMPORTED_MODULE_0__.Tape(this._workingTape));\n            this._workingTape = [];\n            this._pointer = 0; // TODO: リセット不要\n            // this._life += 20\n            return newMachine;\n        }\n        else {\n            this.movePointer(tape.bits.length);\n            return undefined;\n        }\n    }\n    decompose() {\n        const decomposedTapes = this.tape.split();\n        if (this._workingTape.length > 0) {\n            decomposedTapes.push(new _tape__WEBPACK_IMPORTED_MODULE_0__.Tape(this._workingTape));\n        }\n        return decomposedTapes.map(t => new Machine(this.position, t));\n    }\n    draw(p) {\n        p.noStroke();\n        p.fill(this.color.p5(p));\n        const diameter = this.size;\n        p.circle(this.position.x, this.position.y, diameter);\n    }\n    movePointer(index) {\n        this._pointer += index;\n        this._pointer %= this.tape.bits.length;\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/pages/machines_and_tapes_ex2/machine.ts?");

/***/ }),

/***/ "./src/pages/machines_and_tapes_ex2/machine_world.ts":
/*!***********************************************************!*\
  !*** ./src/pages/machines_and_tapes_ex2/machine_world.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MachineWorld\": () => /* binding */ MachineWorld\n/* harmony export */ });\n/* harmony import */ var _alife_game_jam_world__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../alife-game-jam/world */ \"./src/alife-game-jam/world.ts\");\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../classes/physics */ \"./src/classes/physics.ts\");\n/* harmony import */ var _machine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./machine */ \"./src/pages/machines_and_tapes_ex2/machine.ts\");\n/* harmony import */ var _tape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tape */ \"./src/pages/machines_and_tapes_ex2/tape.ts\");\n\n\n\n\nclass MachineWorld extends _alife_game_jam_world__WEBPACK_IMPORTED_MODULE_0__.VanillaWorld {\n    constructor() {\n        super(...arguments);\n        this._machines = [];\n    }\n    get objects() {\n        return this._machines;\n    }\n    addMachine(machines) {\n        this._machines.push(...machines);\n    }\n    bitStatistics() {\n        let zero = 0;\n        let one = 0;\n        const countBits = (bits) => {\n            bits.forEach(b => {\n                if (b === 1) {\n                    one += 1;\n                }\n                else {\n                    zero += 1;\n                }\n            });\n        };\n        this._machines.forEach(m => {\n            countBits(m.tape.bits);\n            countBits(m.workingTape);\n        });\n        return {\n            zero,\n            one,\n        };\n    }\n    next() {\n        const newMachines = [];\n        const used = [];\n        const _moved = []; // 接触するとしばらくconnectし続けるため // FixMe: そのようなことが起きないようにする: 分解する際に離れる力が加わるなど\n        const sortedByX = [...this._machines].sort((lhs, rhs) => {\n            return lhs.position.x - rhs.position.x;\n        });\n        for (let i = 0; i < sortedByX.length; i += 1) {\n            const machine = sortedByX[i];\n            if (used.indexOf(machine) >= 0) {\n                continue;\n            }\n            this.updatePosition(machine);\n            let collided = false;\n            for (let k = i + 1; k < sortedByX.length; k += 1) {\n                const compareTo = sortedByX[k];\n                if (used.indexOf(compareTo) >= 0) {\n                    continue;\n                }\n                const distance = machine.position.dist(compareTo.position);\n                const minDistance = (machine.size + compareTo.size) / 2;\n                const isColliding = distance < minDistance;\n                if (isColliding === false) {\n                    continue;\n                }\n                collided = true;\n                if (machine.canConnect(compareTo.tape) === false) {\n                    continue;\n                }\n                used.push(compareTo);\n                const offspring = machine.connect(compareTo.tape);\n                if (compareTo.workingTape.length > 0) {\n                    const workingTapeMachine = new _machine__WEBPACK_IMPORTED_MODULE_2__.Machine(compareTo.position, new _tape__WEBPACK_IMPORTED_MODULE_3__.Tape(compareTo.workingTape));\n                    newMachines.push(workingTapeMachine);\n                    _moved.push(workingTapeMachine);\n                }\n                if (offspring != undefined) {\n                    _moved.push(offspring);\n                    newMachines.push(offspring);\n                }\n                break;\n            }\n            if (collided) {\n                _moved.push(machine);\n            }\n        }\n        this._machines = this._machines.filter(m => {\n            if (used.indexOf(m) >= 0) {\n                return false;\n            }\n            else if (m.isAlive) {\n                return true;\n            }\n            else {\n                const decomposed = m.decompose();\n                newMachines.push(...decomposed);\n                _moved.push(...decomposed);\n                return false;\n            }\n        });\n        this._machines.push(...newMachines);\n        _moved.forEach(m => {\n            const distance = _classes_physics__WEBPACK_IMPORTED_MODULE_1__.Vector.random(1, -1)\n                .sized(20);\n            m.position = m.position\n                .add(distance)\n                .truncate(this.size);\n        });\n    }\n    updatePosition(machine) {\n        const distance = 5;\n        machine.position = machine.position\n            .add(_classes_physics__WEBPACK_IMPORTED_MODULE_1__.Vector.random(distance, -distance))\n            .truncate(this.size);\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/pages/machines_and_tapes_ex2/machine_world.ts?");

/***/ }),

/***/ "./src/pages/machines_and_tapes_ex2/source.tsx":
/*!*****************************************************!*\
  !*** ./src/pages/machines_and_tapes_ex2/source.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTimestamp\": () => /* binding */ getTimestamp,\n/* harmony export */   \"main\": () => /* binding */ main\n/* harmony export */ });\n/* harmony import */ var _classes_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/utilities */ \"./src/classes/utilities.ts\");\n/* harmony import */ var _alife_game_jam_terrain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../alife-game-jam/terrain */ \"./src/alife-game-jam/terrain.ts\");\n/* harmony import */ var _classes_physics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../classes/physics */ \"./src/classes/physics.ts\");\n/* harmony import */ var _machine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./machine */ \"./src/pages/machines_and_tapes_ex2/machine.ts\");\n/* harmony import */ var _machine_world__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./machine_world */ \"./src/pages/machines_and_tapes_ex2/machine_world.ts\");\n/* harmony import */ var _tape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tape */ \"./src/pages/machines_and_tapes_ex2/tape.ts\");\n/* harmony import */ var _classes_url_parameter_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../classes/url_parameter_parser */ \"./src/classes/url_parameter_parser.ts\");\n\n\n\n\n\n\n\nconst parameterParser = new _classes_url_parameter_parser__WEBPACK_IMPORTED_MODULE_6__.URLParameterParser();\nconst DEBUG = parameterParser.boolean(\"debug\", true, \"d\");\nconst numberOfMachines = parameterParser.int(\"number_of_machines\", 100, \"nm\");\nconst size = parameterParser.int(\"field_size\", 1200, \"s\");\nconst temp = parameterParser.int(\"temp\", 10, undefined);\nlog(`number of machines: ${numberOfMachines}`);\nlet t = 0;\nconst fieldSize = new _classes_physics__WEBPACK_IMPORTED_MODULE_2__.Vector(size, Math.floor(size * 0.6));\nconst initialTape = [0, 0, 0, 0, 0, 1, 0, 1];\nconst friction = 0.99;\nconst world = new _machine_world__WEBPACK_IMPORTED_MODULE_4__.MachineWorld(fieldSize, [new _alife_game_jam_terrain__WEBPACK_IMPORTED_MODULE_1__.FrictedTerrain(fieldSize, friction)]);\nworld.addMachine(createMachines());\nconst initialBitStatistics = world.bitStatistics();\nlog(`[t:${t}] ('0', '1'): (${initialBitStatistics.zero}, ${initialBitStatistics.one})`);\nfunction log(message) {\n    if (DEBUG) {\n        console.log(message);\n    }\n}\nconst getTimestamp = () => {\n    return t;\n};\nconst main = (p) => {\n    p.setup = () => {\n        const canvas = p.createCanvas(fieldSize.x, fieldSize.y);\n        canvas.id(\"canvas\");\n        canvas.parent(\"canvas-parent\");\n        p.background(0);\n    };\n    p.draw = () => {\n        p.background(0);\n        world.next();\n        world.draw(p);\n        if (t % 200 === 0) {\n            const bitStatistics = world.bitStatistics();\n            if (bitStatistics.zero !== initialBitStatistics.zero || bitStatistics.one !== initialBitStatistics.one) {\n                log(`[t:${t}] Physics law violation ('0', '1'): (${bitStatistics.zero}, ${bitStatistics.one})`);\n            }\n        }\n        t += 1;\n    };\n};\nfunction createMachines() {\n    const result = [];\n    for (let i = 0; i < numberOfMachines; i += 1) {\n        const position = fieldSize.randomized();\n        // const tape = new Tape(initialTape)\n        const bits = (0,_classes_utilities__WEBPACK_IMPORTED_MODULE_0__.random)(1) > 0.5 ? [0, 0, 0, 0, 0] : [1, 0, 1, 0, 1, 0];\n        const tape = new _tape__WEBPACK_IMPORTED_MODULE_5__.Tape(bits);\n        result.push(new _machine__WEBPACK_IMPORTED_MODULE_3__.Machine(position, tape));\n    }\n    return result;\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/pages/machines_and_tapes_ex2/source.tsx?");

/***/ }),

/***/ "./src/pages/machines_and_tapes_ex2/tape.ts":
/*!**************************************************!*\
  !*** ./src/pages/machines_and_tapes_ex2/tape.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canConnect\": () => /* binding */ canConnect,\n/* harmony export */   \"Tape\": () => /* binding */ Tape\n/* harmony export */ });\n/* harmony import */ var _classes_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../classes/color */ \"./src/classes/color.ts\");\n\nfunction canConnect(lhs, rhs) {\n    return lhs === (rhs ^ 1);\n}\nclass Tape {\n    constructor(bits) {\n        this.bits = bits;\n        if (bits.length === 0) {\n            throw new Error(`bits is empty`);\n        }\n        const binaryString = this.bits\n            .map(x => `${x}`)\n            .join(\"\");\n        this._value = parseInt(binaryString, 2);\n        const third = Math.floor(this.bits.length / 3);\n        const max = Math.pow(2, third) - 1;\n        const colorValueOf = (colorBits) => {\n            const colorBinaryString = colorBits.map(x => `${x}`)\n                .join(\"\");\n            const colorValue = parseInt(colorBinaryString, 2);\n            return Math.floor(0x7F * (colorValue / max)) + 0x80;\n        };\n        const r = colorValueOf(this.bits.slice(0, third));\n        const g = colorValueOf(this.bits.slice(third, third * 2));\n        const b = colorValueOf(this.bits.slice(third * 2, this.bits.length));\n        this._color = new _classes_color__WEBPACK_IMPORTED_MODULE_0__.Color(r, g, b);\n    }\n    get color() {\n        return this._color;\n    }\n    get binary() {\n        return this._value.toString(2).padStart(this.bits.length, \"0\");\n    }\n    copy() {\n        return new Tape(this.bits);\n    }\n    split() {\n        if (this.bits.length <= 1) {\n            return [this.copy()];\n        }\n        const center = Math.floor(this.bits.length / 2);\n        const head = this.bits.slice(0, center);\n        const tail = this.bits.slice(center, this.bits.length);\n        return [new Tape(head), new Tape(tail)];\n    }\n}\n\n\n//# sourceURL=webpack://alife-lab/./src/pages/machines_and_tapes_ex2/tape.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/pages/machines_and_tapes_ex2/source.tsx");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;